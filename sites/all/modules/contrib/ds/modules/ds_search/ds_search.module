<?php

/**
 * @file
 * Display Suite search.
 */

/**
 * Implements hook_help().
 */
function ds_search_help($path, $arg) {
  switch ($path) {
    case 'admin/structure/ds/list/search':
      $output = '<dl>';
      $output .= '<dt>' . t('Display Suite defines its own search type for search. You need to enable it at !url when you are going to use Drupal core search. You do not have to enable and use it when using the Apachesolr module. Search results will be themed on the default Apachesolr pages.', array('!url' => l('search settings', 'admin/config/search/settings'))) . '</dt>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function ds_search_menu() {
  $items = array();

  $items['admin/structure/ds/list/search'] = array(
    'title' => 'Search',
    'description' => 'Configure search settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ds_search_settings'),
    'access arguments' => array('admin display suite'),
    'file' => 'includes/admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ds_search_theme() {
  return array(
    'ds_search_page' => array(),
    'ds_search_group_by_type_settings' => array(
      'render element' => 'element',
      'file' => 'includes/admin.inc',
    ),
  );
}

/**
 * Search page theming.
 */
function theme_ds_search_page($build) {

  // This is probably because we don't declare anything in ds_search_theme().
  unset($build['theme_hook_original']);

  // Check on empty search results.
  if (empty($build['search_results'])) {

    // Alter the title and extra variables.
    if (!empty($build['search_title'])) {
      $build['search_title']['#markup'] = '<h2>' . t('Your search yielded no results') . '</h2>';
      unset($build['search_extra']);
    }

    $build['search_empty'] = array('#markup' => search_help('search#noresults', drupal_help_arg()));
  }

  $build['search_results']['#sorted'] = TRUE;

  return $build;
}

/**
 * Implements hook_ds_fields_info().
 */
function ds_search_ds_fields_info($entity_type) {
  $fields = array();

  if ($entity_type == 'node') {
    $fields['node']['search_snippet'] = array(
      'title' => t('Search snippet'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'ds_search_snippet',
      'ui_limit' => array('*|' . Drupal::config('ds.search')->get('view_mode')),
    );
    $fields['node']['search_info'] = array(
      'title' => t('Search info'),
      'field_type' => DS_FIELD_TYPE_FUNCTION,
      'function' => 'ds_search_extra_info',
      'ui_limit' => array('*|' . Drupal::config('ds.search')->get('view_mode')),
    );
  }

  if (isset($fields[$entity_type])) {
    return array($entity_type => $fields[$entity_type]);
  }

  return;
}

/**
 * Returns the snippet field.
 */
function ds_search_snippet($field) {
  if (isset($field['entity']->snippet)) {
    return $field['entity']->snippet;
  }
}

/**
 * Returns the info field, just like default search.
 */
function ds_search_extra_info($field) {
  $info = array();
  $info['user'] = theme('username', array('account' => $field['entity']));
  $info['date'] = format_date($field['entity']->changed, 'short');
  if (isset($field['entity']->search_extra) && is_array($field['entity']->search_extra)) {
    $info = array_merge($info, $field['entity']->search_extra);
  }
  return implode(' - ', $info);
}

/**
 * Implements hook_search_info().
 */
function ds_search_search_info() {
  return array(
    'title' => 'Content',
    'path' => Drupal::config('ds.search')->get('search_path'),
  );
}

/**
 * Implements hook_node_update_index().
 */
function ds_search_update_index() {
  ds_search_invoke_node_search('update_index');
}

/**
 * Implements hook_search_status().
 */
function ds_search_search_status() {
  return ds_search_invoke_node_search('search_status');
}

/**
 * Implements hook_search_execute().
 */
function ds_search_search_execute($keys = NULL, $conditions = NULL) {
  // Save the keys in case we need them later on.
  ds_search_get_keys($keys);

  // We will call an extra function which handles the actual search.
  // In some cases, we simply copied a lot from the original hook,
  // because some modules already called drupal_render and were unsetting
  // the #theme key. By using our own search info type, we can call
  // hook_search_page ourselves and be as flexible as we need to be.
  $ds_search_type = Drupal::config('ds.search')->get('search_type') . '_ds_search_execute';

  // Make sure the function exists.
  if (function_exists($ds_search_type)) {
    return $ds_search_type($keys, $conditions);
  }
}

/**
 * Save or get the search keys.
 */
function ds_search_get_keys($keys = NULL) {
  static $run, $saved_keys = FALSE;

  if (!$run) {
    $run = TRUE;
    $saved_keys = $keys;
  }
  else {
    return $saved_keys;
  }
}

/**
 * Invoke a given search hook on the node module.
 *
 * @param $hook
 *   Hook to invoke.
 */
function ds_search_invoke_node_search($hook) {

  $enabled_search_modules = Drupal::config('search.settings')->get('active_modules');

  // If node search is enabled, core is invoking it.
  if (isset($enabled_search_modules['node']) && $enabled_search_modules['node'] === 'node') {
    return;
  }
  else {
    $ds_search_type = Drupal::config('ds.search')->get('search_type');
    if ($ds_search_type != 'node') {
      return;
    }
  }

  return Drupal::moduleHandler()->invoke('node', $hook);
}

/**
 * Implements hook_search_page().
 */
function ds_search_search_page($results) {

  // Build shared variables.
  $build = array('#type' => 'node');
  ds_build_shared_page_variables($build);


  $data = entity_view_multiple($results, Drupal::config('ds.search')->get('view_mode'));
  $build['search_results'] = $data;
  /*$i = 0;
  $parity = 'odd';
  foreach ($results as $id => $result) {
    $data = entity_view_mul($result, Drupal::config('ds.search')->get('view_mode'));
    $data[$result->entity_id]['#weight'] = $i;
    $build['search_results'][$i] = $data[$result->entity_id];
    $build['search_results'][$i]['#node']->ds_search_zebra = $parity;
    $parity = $parity == 'odd' ? 'even' : 'odd';
    unset($results[$result->entity_id]);
    unset($result);
    $i++;
  }*/

  //dsm($build);


    // Provide zebra striping for results that are not grouped.
    /*$parity = 'odd';
    foreach ($build['search_results'] as $id => $result) {
      $build['search_results'][$id]['#node']->ds_search_zebra = $parity;
      $parity = $parity == 'odd' ? 'even' : 'odd';
    }*/

  return theme('ds_search_page', $build);
}

/**
 * Search on behalf of Drupal Core.
 */
function node_ds_search_execute($keys = NULL, $conditions = NULL) {
  // Build matching conditions
  $query = db_select('search_index', 'i', array('target' => 'slave'))
    ->extend('Drupal\search\SearchQuery')
    ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
  $query->join('node', 'n', 'n.nid = i.sid');
  $query
    ->condition('n.status', 1)
    ->addTag('node_access')
    ->searchExpression($keys, 'node');

  // Insert special keywords.
  $query->setOption('type', 'n.type');
  $query->setOption('langcode', 'n.langcode');
  if ($query->setOption('term', 'ti.tid')) {
    $query->join('taxonomy_index', 'ti', 'n.nid = ti.nid');
  }
  // Only continue if the first pass query matches.
  if (!$query->executeFirstPass()) {
    return array();
  }

  // Add the ranking expressions.
  _node_rankings($query);

  $limit = Drupal::config('ds.search')->get('search_node_limit');
  $query->limit($limit);

   // Load results.
  $find = $query->execute();
  $results = array();
  foreach ($find as $item) {
    $node = node_load($item->sid);
    $node->entity_type = 'node';
    $node->entity_id = $item->sid;
    $node->search_extra = Drupal::moduleHandler()->invokeAll('node_search_result', $node, $node->langcode);
    // Only build a node search snippet if this field is actually being used.
    $fields = ds_get_field_settings($node->entity_type, $node->type, 'search_result');
    if (!empty($fields) && isset($fields['search_snippet'])) {
      // Because the 'search_result' display is being built right now
      // and because it is being overridden by Display Suite,
      // it is necessary to use the 'search_index' display for rendered
      // field content.
      $build = node_view($node, 'search_index');
      unset($build['#theme']);
      // Render the node.
      $rendered = drupal_render($build);
      // Attach extra information to the rendered output.
      $rendered .= ' ' . $node->search_extra;
      // Generate the snippet based on rendered content.
      $node->snippet = search_excerpt($keys, $rendered);
    }
    $results[$item->sid] = $node;
  }
  return $results;
}

/**
 * Override search results page for users.
 */
if (Drupal::config('ds.search')->get('user_override_search_page')) {
  function user_search_page($results) {
    $build = array('#type' => 'user');
    global $base_url;

    ds_build_shared_page_variables($build);

    $uids = array();
    foreach ($results as $key => $result) {
      $uid = FALSE;

      // Try to get the uid from the $result['link'];
      $path = explode('/', $result['link']);
      $uid = end($path);

      // Lookup drupal path, we are most likely having an alias.
      if (!is_numeric($uid)) {
        $path = str_replace($base_url . '/', '', $result['link']);
        $alias = drupal_get_normal_path($path);
        $path = explode('/', $alias);
        $uid = end($path);
      }

      if (is_numeric($uid)) {
        $uids[] = $uid;
      }

      // Return all uids.
      if (!empty($uids)) {
        $accounts = user_load_multiple($uids);
        foreach ($accounts as $account) {
          $build['search_results'][$account->uid] = user_view($account, Drupal::config('ds.search')->get('view_mode'));
        }
      }
    }

    // Return output.
    return theme('ds_search_page', $build);
  }
}

/**
 * Build shared page variables.
 *
 * @param $build
 *   The build array.
 */
function ds_build_shared_page_variables(&$build) {
  $config = Drupal::config('ds.search');

  // Search results title.
  if ($config->get('show_title')) {
    $build['search_title'] = array('#markup' => '<h2>' . t('Search results') . '</h2>');
  }

  // Extra variables.
  if ($config->get('search_variables') != 'none') {
    $build['search_extra'] = array('#markup' => '<div class="ds-search-extra">' . ds_search_extra_variables(arg(2)) . '</div>');
  }

  // Search results.
  $build['search_results'] = array();

  // Pager.
  $build['search_pager'] = array('#markup' => theme('pager', array('tags' => NULL)));

  // CSS and JS.
  if ($config->get('highlight')) {
    drupal_add_css(drupal_get_path('module', 'ds_search') . '/css/ds_search.theme.css');
    drupal_add_js(drupal_get_path('module', 'ds_search') . '/js/ds_search.js');
    drupal_add_js(array(
      'ds_search' => array(
        'selector' => check_plain($config->get('highlight_selector', '.view-mode-search_result')),
        'search' => check_plain(arg(2)),
      ),
    ), 'setting');
  }
}

/**
 * Return the extra variables.
 */
function ds_search_extra_variables($arg_keys = NULL) {
  $type = Drupal::config('ds.search')->get('search_variables');

  // Define the number of results being shown on a page.
  // We rely on the apache solr rows for now.
  $items_per_page = variable_get('apachesolr_rows', 10);

  // Get the current page.
  $current_page = isset($_REQUEST['page']) ? $_REQUEST['page']+1 : 1;

  // Get the total number of results from the $GLOBALS.
  $total = isset($GLOBALS['pager_total_items'][0]) ? $GLOBALS['pager_total_items'][0] : 0;

  // Perform calculation
  $start = $items_per_page * $current_page - ($items_per_page - 1);
  $end = $items_per_page * $current_page;
  if ($end > $total) $end = $total;

  // Get the search keys.
  $keys = empty($arg_keys) ? trim(ds_search_get_keys()) : $arg_keys;

  // Send the right extra variable.
  switch ($type) {
    case 'search_totals':
      return format_plural($total, 'One result', 'Total results: @total.', array('@total' => $total));
      break;

    case 'search_totals_plus_keywords':
      return format_plural($total, 'Your search for "<strong>@search</strong>" gave back 1 result.',
                                   'Your search for "<strong>@search</strong>" gave back @count results.',
                                   array('@search' => $keys));
      break;

    case 'search_totals_from_to_end':
      return format_plural($total, 'Displaying @start - @end of 1 result.',
                                   'Displaying @start - @end of @count results.',
                                   array('@start' => $start, '@end' => $end));
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ds_search_form_search_form_alter(&$form, $form_state) {
  if (Drupal::config('ds.search')->get('search_type') == 'node' && isset($form['module']) && $form['module']['#value'] == 'ds_search') {
    if (Drupal::config('ds.search')->get('node_form_alter', FALSE)) {
      $form['module']['#value'] = 'node';
      node_form_search_form_alter($form, $form_state);
    }
  }
}

